setwd("D:/Mis documentos/R directorio de trabajo")
pwd
pwd;
clear
dir
ls
ls -a
cd..
summary(cars)
library("digest", lib.loc="~/R/win-library/3.1")
detach("package:digest", unload=TRUE)
library("markdown", lib.loc="~/R/win-library/3.1")
detach("package:markdown", unload=TRUE)
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
getwd
getwd ()
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.1")
library("knitr", lib.loc="~/R/win-library/3.1")
swirl()
5+7
x <-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4,)+c(0,10)
c(1,2,3,4,) + c(0,10)
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
class(x)
a<- c(4,TRUE)
class(a)
dim(x)
dim(a)
m<-1:33000
s <- list(2, "a", "b", TRUE)
s[[1]]
s[[4]]
s[[2]]
s[[3]]
t<-s[[3]]
t
t
class()
class(t)
class(x[[1]])
z+y
z(z<6)<-0
z[z<6]<-0
swirl()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
getwd()
ls()
x<-9
ls
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir",recursive=TRUE)
?str
sessioninfo()
sessionInfo()
library(RMySQL)
drv = dbDriver("MySQL")
con = dbConnect(drv,dbname=’test’,user=’root’,
+ password=’alfa852456’,host=’127.0.0.1:3306’)
con = dbConnect(drv,dbname=’a1’,user=’root’,
+ password=’alfa852456’,host=’127.0.0.1:3306’)
con = dbConnect(drv,dbname=a1,user=’root’,
+ password=’alfa852456’,host=’127.0.0.1:3306’)
con = dbConnect(drv,dbname=a1,user=root,
+ password=’alfa852456’,host=’127.0.0.1:3306’)
con = dbConnect(drv,dbname=a1,user=root,
+ password=alfa852456,host=127.0.0.1:3306)
con <- dbConnect(drv,dbname=a1,user=root,
+ password=alfa852456,host=127.0.0.1:3306)
con <- dbConnect(drv,dbname=a1,user=root,password= alfa852456,host=127.0.0.1:3306)
con <- dbConnect(drv,dbname="a1",user="root",password="alfa852456",host="127.0.0.1:3306")
con <- dbConnect(drv,dbname="a1",user="root",password="alfa852456",host="127.0.0.1")
mydata <- dbGetQuery(con,’select * from a1.am_am_membe’)
mydata <- dbGetQuery(con, "select * from a1.am_am_membe")
mydata <- dbGetQuery(con, "select * from a1.am_am_member")
help(memory.size)
memory.size
memory.size()
setwd("D:/Mis documentos/Documentos/Data Science Specialization/Apunters y ejercicios/Practical Machine Learning/Course Project")
library(caret)
library(dplyr)
pml_training <- read.csv("Data/pml-training.csv")
pml_testing <- read.csv("Data/pml-testing.csv")
data<-select(pml_training,
classe,
starts_with("roll"),
starts_with("pitch"),
starts_with("yaw"),
starts_with("total"),
starts_with("gyros"),
starts_with("accel"),
starts_with("magnet"))
inTrain = createDataPartition(data$classe, p = 3/4)[[1]]
set.seed(3433)
modelFit.pcaNNet <- pcaNNet(classe ~ ., data = data, subset = inTrain, size = 16, rang = 0.5,
decay = 5e-4, maxit = 1000)
confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
training = data[ inTrain,]
testing = data[-inTrain,]
confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
max(|data|)
max(abs(data))
max(abs(data[,-1]))
set.seed(3433)
modelFit.pcaNNet <- pcaNNet(classe ~ ., data = data, subset = inTrain, size = 16, rang = 0.0003,
decay = 5e-4, maxit = 1000)
confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- pcaNNet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3 & j==0.1) resultados <- NULL
resultados<-rbind(resultados,c(i,j,cm$overall["Accuracy"]))
}
resultados
modelFit.pcaNNet&wts
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- pcaNNet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultados <- NULL
resultados<-rbind(resultados,c(i,cm$overall["Accuracy"]))
}
resultados
library("nnet", lib.loc="C:/Program Files/R/R-3.1.3/library")
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = 16, rang = 0.0003,
decay = 5e-4, maxit = 1000)
confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
1/max(abs(data[,-1]))
preProc <- preProcess(training[,-1] ,method="pca",thresh = 0.80)
trainingPC <- predict(preProc,training[,-1])
modelFitPCA <- train(training$classe ~ .,method="glm",trainingPC)
modelFitPCA <- train(training$classe ~ .,method="nnet",trainingPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(predict(modelFitPCA,testPC),testing$classe)
View(resultados)
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultadosnnet <- NULL
resultados<-rbind(resultadosnnet,c(i,cm$overall["Accuracy"]))
}
resultadosnnet
View(resultados)
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultadosnnet <- NULL
resultadosnnet<-rbind(resultadosnnet,c(i,cm$overall["Accuracy"]))
}
resultadosnnet
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- pcaNNet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultados <- NULL
resultados<-rbind(resultados,c(i,cm$overall["Accuracy"]))
}
resultados
View(resultadosnnet)
View(resultadosnnet)
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultadosnnet <- NULL
resultadosnnet<-rbind(resultadosnnet,c(i,cm$overall["Accuracy"]))
}
resultadosnnet
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000,MaxNWts=500)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultadosnnet <- NULL
resultadosnnet<-rbind(resultadosnnet,c(i,cm$overall["Accuracy"]))
}
resultadosnnet
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000,MaxNWts=1500)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultadosnnet <- NULL
resultadosnnet<-rbind(resultadosnnet,c(i,cm$overall["Accuracy"]))
}
print(resultados)
print("Los resultados",resultados)
print("Los resultados "resultados)
print("Los resultados ": resultados)
print(c("Los resultados", resultados))
print(c("Los resultados", i))
noquote(i)
noquote(c("Los resultados  ",i))
for(i in 3:20){
set.seed(3433)
modelFit.pcaNNet <- nnet(classe ~ ., data = data, subset = inTrain, size = i, rang = 0.0003,
decay = 5e-4, maxit = 1000,MaxNWts=1500)
cm<-confusionMatrix(predict(modelFit.pcaNNet, data[-inTrain,], type = "class"),testing$classe)
if (i==3) resultadosnnet <- NULL
resultadosnnet<-rbind(resultadosnnet,c(i,cm$overall["Accuracy"]))
noquote(c("Ciclo: ",i))
}
resultadosnnet
noquote(c("Ciclo: ",i))
for(i in 3:20){
)
noquote(c("Ciclo: ",i))
}
for(i in 3:20){
noquote(c("Ciclo: ",i))
}
for(i in 3:20){
print(noquote(c("Ciclo: ",i)))
}
for(i in 3:20){
paste("Ciclo: ",i)
print(noquote(c("Ciclo: ",i)))
}
for(i in 3:20){
paste("Ciclo: ",i)
#       print(noquote(c("Ciclo: ",i)))
}
for(i in 3:20){
print(paste("Ciclo: ",i))
#       print(noquote(c("Ciclo: ",i)))
}
x<-seq(0,1,by=0.01)
y<-sin(2*pi*x)+rnorm(length(x),0,0.1)
n<-lenght(x)
indices<-sort(sample(1:n,round(0.5*n))
training.x<-x[indices]
training.y<-y[indices]
test.x<-x[-indices]
test.y<-y[-indices]
df<-data.frame(X=X,Y=y)
x<-seq(0,1,by=0.01)
y<-sin(2*pi*x)+rnorm(length(x),0,0.1)
n<-length(x)
indices<-sort(sample(1:n,round(0.5*n))
training.x<-x[indices]
training.y<-y[indices]
test.x<-x[-indices]
test.y<-y[-indices]
df<-data.frame(X=X,Y=y)
data(oil)
createDataPartition(oilType, 2)
createResample(oilType, 2)
createFolds(oilType, 10)
createDataPartition(oilType, 2,list=FALSE)
data(oil)
createDataPartition(oilType, 2,list=FALSE)[[1]]
createDataPartition(oilType, 2,list=TRUE)[[1]]
head(oil)
str(data(oil))
help(oil)
str(oiltype)
str(oilType)
oilType
createDataPartition(oilType, p=.5,list=FALSE)
createDataPartition(oilType, p=.5,list=TRUE)
rdaGrid = data.frame(gamma = (0:4)/4, lambda = 3/4)
View(rdaGrid)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
createDataPartition(oilType, 2)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
